/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SimulationService } from "../simulation.service";
import { SimulationCreateInput } from "./SimulationCreateInput";
import { Simulation } from "./Simulation";
import { SimulationFindManyArgs } from "./SimulationFindManyArgs";
import { SimulationWhereUniqueInput } from "./SimulationWhereUniqueInput";
import { SimulationUpdateInput } from "./SimulationUpdateInput";

export class SimulationControllerBase {
  constructor(protected readonly service: SimulationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Simulation })
  async createSimulation(
    @common.Body() data: SimulationCreateInput
  ): Promise<Simulation> {
    return await this.service.createSimulation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Simulation] })
  @ApiNestedQuery(SimulationFindManyArgs)
  async simulations(@common.Req() request: Request): Promise<Simulation[]> {
    const args = plainToClass(SimulationFindManyArgs, request.query);
    return this.service.simulations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Simulation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async simulation(
    @common.Param() params: SimulationWhereUniqueInput
  ): Promise<Simulation | null> {
    const result = await this.service.simulation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Simulation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSimulation(
    @common.Param() params: SimulationWhereUniqueInput,
    @common.Body() data: SimulationUpdateInput
  ): Promise<Simulation | null> {
    try {
      return await this.service.updateSimulation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Simulation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSimulation(
    @common.Param() params: SimulationWhereUniqueInput
  ): Promise<Simulation | null> {
    try {
      return await this.service.deleteSimulation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
