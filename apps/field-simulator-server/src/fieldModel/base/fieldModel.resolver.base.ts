/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FieldModel } from "./FieldModel";
import { FieldModelCountArgs } from "./FieldModelCountArgs";
import { FieldModelFindManyArgs } from "./FieldModelFindManyArgs";
import { FieldModelFindUniqueArgs } from "./FieldModelFindUniqueArgs";
import { DeleteFieldModelArgs } from "./DeleteFieldModelArgs";
import { FieldModelService } from "../fieldModel.service";
@graphql.Resolver(() => FieldModel)
export class FieldModelResolverBase {
  constructor(protected readonly service: FieldModelService) {}

  async _fieldModelsMeta(
    @graphql.Args() args: FieldModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FieldModel])
  async fieldModels(
    @graphql.Args() args: FieldModelFindManyArgs
  ): Promise<FieldModel[]> {
    return this.service.fieldModels(args);
  }

  @graphql.Query(() => FieldModel, { nullable: true })
  async fieldModel(
    @graphql.Args() args: FieldModelFindUniqueArgs
  ): Promise<FieldModel | null> {
    const result = await this.service.fieldModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FieldModel)
  async deleteFieldModel(
    @graphql.Args() args: DeleteFieldModelArgs
  ): Promise<FieldModel | null> {
    try {
      return await this.service.deleteFieldModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
