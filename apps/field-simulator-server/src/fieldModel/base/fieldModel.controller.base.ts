/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FieldModelService } from "../fieldModel.service";
import { FieldModelCreateInput } from "./FieldModelCreateInput";
import { FieldModel } from "./FieldModel";
import { FieldModelFindManyArgs } from "./FieldModelFindManyArgs";
import { FieldModelWhereUniqueInput } from "./FieldModelWhereUniqueInput";
import { FieldModelUpdateInput } from "./FieldModelUpdateInput";

export class FieldModelControllerBase {
  constructor(protected readonly service: FieldModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FieldModel })
  async createFieldModel(
    @common.Body() data: FieldModelCreateInput
  ): Promise<FieldModel> {
    return await this.service.createFieldModel({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FieldModel] })
  @ApiNestedQuery(FieldModelFindManyArgs)
  async fieldModels(@common.Req() request: Request): Promise<FieldModel[]> {
    const args = plainToClass(FieldModelFindManyArgs, request.query);
    return this.service.fieldModels({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FieldModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fieldModel(
    @common.Param() params: FieldModelWhereUniqueInput
  ): Promise<FieldModel | null> {
    const result = await this.service.fieldModel({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FieldModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFieldModel(
    @common.Param() params: FieldModelWhereUniqueInput,
    @common.Body() data: FieldModelUpdateInput
  ): Promise<FieldModel | null> {
    try {
      return await this.service.updateFieldModel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FieldModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFieldModel(
    @common.Param() params: FieldModelWhereUniqueInput
  ): Promise<FieldModel | null> {
    try {
      return await this.service.deleteFieldModel({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
